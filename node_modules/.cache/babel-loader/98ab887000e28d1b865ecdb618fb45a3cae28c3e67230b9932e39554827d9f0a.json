{"ast":null,"code":"import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}","map":{"version":3,"names":["React","setRef","useForkRef","refA","refB","useMemo","refValue"],"sources":["/home/sina/Documents/personal projects/portfolio/.yarn/__virtual__/@material-ui-core-virtual-5bea6cf211/0/cache/@material-ui-core-npm-4.12.4-5b6f139342-96b48deccd.zip/node_modules/@material-ui/core/esm/utils/useForkRef.js"],"sourcesContent":["import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,UAAU;AAC7B,eAAe,SAASC,UAAU,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC7C;AACF;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACK,OAAO,CAAC,YAAY;IAC/B,IAAIF,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;MAChC,OAAO,IAAI;IACb;IAEA,OAAO,UAAUE,QAAQ,EAAE;MACzBL,MAAM,CAACE,IAAI,EAAEG,QAAQ,CAAC;MACtBL,MAAM,CAACG,IAAI,EAAEE,QAAQ,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACH,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}